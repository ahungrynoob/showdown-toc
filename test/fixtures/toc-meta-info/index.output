<blockquote>
  <p>前段时间，编写自己博客项目的时候，需要有一个全局状态管理，感觉redux又太重了，就自己基于hook搞一个吧，懒得装redux了</p>
</blockquote>
<p>🎉🎉🎉 本文简单介绍下原理，伸手党可直接食用：<a href="https://github.com/ahungrynoob/use-root-reducer">use-root-reducer</a></p>
<p>⚠️先说一个大前提： redux已经有完善的社区，和很多的middleware, hooks并不是redux的替代品，在大型webapp的开发中，还是使用redux来管理比较好</p>
<h2 id="usereducer和redux的区别："><code>useReducer</code>和<code>redux</code>的区别：</h2>
<p><code>useReducer</code>创造的<code>state</code>是基于各个组件的，组件与组件之间的state是独立的，无法共享，如果需要传递只能通过<code>props</code>或者<code>context</code>，所以，就像它的名字一样的，<code>useReducer</code>就是方便开发者去使用自己的<code>reducer</code>来管理组件级别的<code>state</code>。</p>
<p><code>redux</code>则可以独立于组件之外，创造一个全局的状态管理，这个全局的状态可以和各个组件通过<code>mapStateToProps</code>和<code>mapDispatchToProps</code>来通信。</p>
<h2 id="思路：">思路：</h2>
<p>知道区别之后，就会有一个想法：如何基于hooks的特性来创造一个简洁的全局状态，并且各个子组件可以触达到这个状态呢？嗯。。在根组件建立一个全局state和各个dispatch的收口，然后通过react context来将全局的state和全局dispatch下发给各个子组件或许是不错的选择。</p>
<h3 id="第一步，通过usereducer在根组件上创建globaldispatch和globalstate：">第一步，通过useReducer在根组件上创建globalDispatch和globalState：</h3>
<pre><code class="jsx language-jsx">// app.jsx
import React, { useReducer } from "react";
import { addTodo, completeTodo, setVisibilityFilter } from "../actions";
import { visibilityFilter, todos } from "./reducers";

function App() {
  const [filters, dispatchFilter] = useReducer(visibilityFilter, "SHOW_ALL");
  const [todoList, dispatchTodos] = useReducer(todos, []);

  // 这里可以创建一个 global dispatch function 和 global state
  const globalDispatch = action =&gt;
    [dispatchFilter, dispatchTodos].forEach(fn =&gt; fn(action));
  const globalState = {
    filters,
    todoList
  };

  return (
    &lt;div&gt;
      ...
    &lt;/div&gt;
  );
}

export default App;</code></pre>
<h3 id="第二步：-创建context并在根组件上传入globalstate和globaldispatch">第二步： 创建context并在根组件上传入<code>globalState</code>和<code>globalDispatch</code></h3>
<p>这里的context的作用是能够让树上的任意位置的组件能通过<code>useContext</code>获取到<code>globalState</code>和<code>globalDispatch</code>函数</p>
<pre><code class="jsx language-jsx">// context.jsx
import React from "react";

export const StateContext = React.createContext({});

export const DispatchContext = React.createContext(null);</code></pre>
<pre><code class="jsx language-jsx">// app.jsx
import React, { useReducer } from "react";
import { addTodo, completeTodo, setVisibilityFilter } from "../actions";
import { visibilityFilter, todos } from "./reducers";

function App() {
  const [filters, dispatchFilter] = useReducer(visibilityFilter, "SHOW_ALL");
  const [todoList, dispatchTodos] = useReducer(todos, []);

  // 这里可以创建一个 global dispatch function 和 global state
  const globalDispatch = action =&gt;
    [dispatchFilter, dispatchTodos].forEach(fn =&gt; fn(action));
  const globalState = {
    filters,
    todoList
  };

  return (
    &lt;DispatchContext.Provider value={globalDispatch}&gt;
      &lt;StateContext.Provider value={globalState}&gt;{children}&lt;/StateContext.Provider&gt;
    &lt;/DispatchContext.Provider&gt;
  );
}

export default App;</code></pre>
<h3 id="在子组件中使用globalstate和globaldispatch：">在子组件中使用globalState和globalDispatch：</h3>
<p>然后通过<code>useContext</code>的hook，我们就能在任意子组件中获取到<code>state</code>和<code>dispatch</code>了，相当于redux的<code>mapStateToProps</code>和<code>mapDispatchToProps</code>的作用</p>
<pre><code class="jsx language-jsx">import React from "react";
import { completeTodo } from "./actions";
import { StateContext, DispatchContext } from "./context.js";

export default () =&gt; {
  const state = React.useContext(StateContext);
  const dispatch = React.useContext(DispatchContext);
  const { todoList } = state;
  return (
    &lt;ul&gt;
      {todoList.map(({ text, completed }, index) =&gt; {
        return (
          &lt;li
            onClick={() =&gt; {
              dispatch(completeTodo(index));
            }}
            className={`${completed ? "done" : "todo"}`}
          &gt;
            {text}
          &lt;/li&gt;
        );
      })}
    &lt;/ul&gt;
  );
};</code></pre>
<h3 id="总结和建议：">总结和建议：</h3>
<p>通过以上几步就能获得一个全局状态管理的功能，针对中小型网站，可以不再需要redux。<br />
我已经封装了这个小工具，有完整的单元测试和覆盖率，且得益于typescript的高级类型，能够给出智能的IDE提示，详见<a href="https://github.com/ahungrynoob/use-root-reducer">use-root-reducer</a>，欢迎pr~</p>